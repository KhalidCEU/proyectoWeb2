# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
openapi: 3.0.3
info:
  title: Snapi (Sneakers API)
  version: 1.0.0
  description: API for managing sneakers, reviews, users, providers and stores
servers:
  - url: http://localhost:8080/api/
    description: Production server

tags:
  - name: sneakers
    description: Operations for managing sneakers inventory
  - name: reviews
    description: Operations for managing sneaker reviews
  - name: users
    description: Operations for managing user accounts
  - name: providers
    description: Operations for managing sneaker providers (brands)
  - name: stores
    description: Operations for managing stores

paths:

  # SNEAKERS

  /sneakers:

    get:
      tags:
        - sneakers
      summary: List all sneakers
      parameters:
        - name: release_date_after
          in: query
          schema:
            type: string
            format: date
          description: Filter by release date (e.g., 2024-05-01)
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Maximum number of items to return (default 20)
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of items to skip before starting to collect the result set (default 0)
        - name: currency
          in: query
          schema:
            type: string
          required: false
          description: Convert to a specific currency (e.g., 'eur'). See docs/currencies.md for more details.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SneakersResponse'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: No sneakers found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - sneakers
      summary: Create a new sneaker
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sneaker'
      responses:
        '201':
          description: Sneaker created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sneaker'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

  /sneakers/{id}:
    get:
      tags:
        - sneakers
      summary: Get a specific sneaker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sneaker'
        '404':
          description: Sneaker not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - sneakers
      summary: Update a sneaker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sneaker'
      responses:
        '200':
          description: Sneaker updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sneaker'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Sneaker not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - sneakers
      summary: Delete a sneaker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Sneaker deleted
        '404':
          description: Sneaker not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

  # REVIEWS

  /sneakers/{sneakerId}/reviews:
    get:
      tags:
        - reviews
      summary: Get all reviews for a sneaker
      parameters:
        - name: sneakerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: Sneaker not found or no reviews available
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - reviews
      summary: Create a review for a sneaker
      parameters:
        - name: sneakerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '409':
          description: User has already reviewed this sneaker
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Sneaker not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reviews/{reviewId}:
    get:
      tags:
        - reviews
      summary: Get a specific review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsResponse'
        '404':
          description: Review not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - reviews
      summary: Update a review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Review updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsResponse'
        '404':
          description: Review not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - reviews
      summary: Delete a review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Review deleted
        '404':
          description: Review not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

  # USERS

  /users:
    post:
      tags:
        - users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - users
      summary: Update user details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: User not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - users
      summary: Delete a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/favorites:
    get:
      tags:
        - users
      summary: Get user's favorites
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sneaker'
        '404':
          description: User not found or no favorites available
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - users
      summary: Add to favorites
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sneakerId:
                  type: string
      responses:
        '201':
          description: Added to favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponse'
        '404':
          description: User or sneaker not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/favorites/{sneakerId}:
    delete:
      tags:
        - users
      summary: Remove from favorites
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: sneakerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Favorite removed
        '404':
          description: User not found or sneaker not in favorites
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

  # PROVIDERS

  /providers:
    get:
      tags:
        - providers
      summary: List all providers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
        '404':
          description: No providers found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - providers
      summary: Create a new provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Provider'
      responses:
        '201':
          description: Provider created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

  /providers/{id}:
    get:
      tags:
        - providers
      summary: Get provider details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
        '404':
          description: Provider not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - providers
      summary: Update provider
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Provider'
      responses:
        '200':
          description: Provider updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvidersResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Provider not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - providers
      summary: Delete a provider
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Provider deleted
        '404':
          description: Provider not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

  # STORES

  /stores:
    get:
      tags:
        - stores
      summary: List all stores
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '404':
          description: No stores found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - stores
      summary: Create a new store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
      responses:
        '201':
          description: Store created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stores/{id}:
    get:
      tags:
        - stores
      summary: Get store details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '404':
          description: Store not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - stores
      summary: Update store
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
      responses:
        '200':
          description: Store successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Store not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - stores
      summary: Delete a store
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Store deleted
        '404':
          description: Store not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          $ref: '#/components/responses/InternalServerError'

## COMPONENTS
components:

  # Schemas
  schemas:

    SneakersResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Sneaker'
        count:
          type: integer
          description: Number of sneakers returned in this response
        total:
          type: integer
          description: Total number of sneakers matching the query (for all pages)
        offset:
          type: integer
          description: Offset used in the query
        limit:
          type: integer
          description: Limit used in the query
        message:
          type: string
        status:
          type: string

    Sneaker:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name:
          type: string
        color:
          type: string
        release_date:
          type: string
          format: date-time
        brand:
          type: string
        modelKey:
          type: string
        size:
          type: number
        retail_price:
          type: number
          format: float
          description: By default the price is in USD.
        sales_price:
          type: number
          format: float
          description: By default the price is in USD.
      required: [name, retail_price]

    Review:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        sneakerId:
          type: string
          readOnly: true # The saved sneakerId is the one in the param
        userId:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        date:
          type: string
          format: date-time
      required: [sneakerId, rating, userId]

    UserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
      required: [name, email]

    User:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name:
          type: string
        email:
          type: string
          format: email
        favorites:
          type: array
          items:
            type: string
      required: [name, email]

    UserResponse:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/User'
        message:
          type: string
        status:
          type: string
          enum: [success]
      required: [items, message, status]

    FavoritesResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: string
        message:
          type: string
        status:
          type: string
          enum: [success]
      required: [items, message, status]

    ReviewsResponse:
      type: object
      properties:
        items:
            $ref: '#/components/schemas/Review'
        message:
          type: string
        status:
          type: string
          enum: [success]
      required: [items, message, status]


    Provider:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name:
          type: string
        contact_email:
          type: string
          format: email
      required: [name, contact_email]

    ProvidersResponse:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/Provider'
        message:
          type: string
        status:
          type: string
          enum: [success]
      required: [items, message, status]

    Store:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        address:
          type: string
          minLength: 10
          maxLength: 100

    # Status code schemas

    Error:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
          enum: [failure]
      required: [message, status]


  # Responses
  responses:

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
